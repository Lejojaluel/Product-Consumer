This is a Lab, not in-class exercise.

Extend the burger cook producer consumer example by doing the following:

Both the producer and consumer log their activities in a manner similar to the example.  Be sure to print the extra information that is new to this assignment.  Sample output is attacked.  You should log at least all of the events that you see in my sample log.  Logging additional information is OK as long as you do not go overboard.
Remember JavaDoc and Google style, as for all programs in the class.

For up to 100 points extra credit, also do some or all of the following:

When a producer finishes cooking a burger, it checks the size of sum of the burger queues.  If the sum is at least certain value, the producer stops cooking (i.e., exits its loop and the run() function returns).

Parameters should be passed in on the command line.  Or, as an alternative to using command-line parameters, you can create a separate class that holds all of the parameters.  The parameters you need to track (one way or the other) are:

min and max cook and eat times,
consumer wait time if burger type is the wrong type.  Rremember that the queue might be empty if no producer has made this burger type yet,
consumer creation delay range (min and max, like cook and eat times),
manager check interval,
number of active consumers needed to create another producer,
queue size for the producer to stop cooking,
In the comment at the top of the driver, provide a compare and contrast of the two methods of dealing with parameters.  This compare and contrast should identify at least one benefit for one method over the other for each method of the two (command line vs parameter class).

There is at least one concurrency problem that can come up with these additional points.   Identify what can go wrong if you are really unlucky (not bugs in the code, but unlucky random numbers).  Place this information in the comment at the top of the driver.